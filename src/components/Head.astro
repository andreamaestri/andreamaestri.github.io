---
import "../styles/global.css";
import "@fontsource/ibm-plex-sans/400.css";
import "@fontsource/ibm-plex-sans/500.css";
import "@fontsource/ibm-plex-sans/700.css";
import "@fontsource/ibm-plex-serif/400.css";
import "@fontsource/ibm-plex-serif/500.css";
import "@fontsource/ibm-plex-serif/700.css";
import ibm400 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-400-normal.woff2";
import ibm500 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-500-normal.woff2";
import ibm700 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-700-normal.woff2";
import ibmserif400 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-400-normal.woff2";
import ibmserif500 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-500-normal.woff2";
import ibmserif700 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-700-normal.woff2";
import { ViewTransitions } from "astro:transitions";



interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="src/icons/favicon-dark.svg" media="(prefers-color-scheme: dark)">
<link rel="icon" type="image/svg+xml" href="src/icons/favicon-light.svg" media="(prefers-color-scheme: light)">
<link rel="icon" type="image/x-icon" href="src/icons/favicon-light.svg">
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={ibm400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibm500} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibm700} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif500} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif700} as="font" type="font/woff2" crossorigin/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        "link[as=\"font\"]"
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());    const themeToggle = document.querySelector(".theme-controller");
    if (themeToggle instanceof HTMLInputElement) {
      themeToggle.checked = document.documentElement.classList.contains("dark");
      themeToggle.addEventListener("change", (e) => {
        const target = e.target;
        if (target instanceof HTMLInputElement) {
          const theme = target.checked ? "dark" : "light";
          localStorage.setItem("theme", theme);
          toggleTheme(theme);
        }
      });
    }

    window.matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", event => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches ? "dark" : "light");
        }
      });

    document.addEventListener("scroll", debounce(onScroll, 10));
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");
    animateElements.forEach((element) => {
      element.classList.add("show");
    });
  }

  function onScroll() {
    requestAnimationFrame(() => {
      if (window.scrollY > 0) {
        document.documentElement.classList.add("scrolled");
      } else {
        document.documentElement.classList.remove("scrolled");
      }
    });
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }
  function toggleTheme(theme) {
    requestAnimationFrame(() => {
      document.documentElement.classList.toggle("dark", theme === "dark");
    });
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;
    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme);
    } else {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      toggleTheme(systemTheme);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
