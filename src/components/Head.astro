---
import "../styles/global.css";
import "../styles/theme-utilities.css";
import "@fontsource/ibm-plex-sans/400.css";
import "@fontsource/ibm-plex-sans/500.css";
import "@fontsource/ibm-plex-sans/700.css";
import "@fontsource/ibm-plex-serif/400.css";
import "@fontsource/ibm-plex-serif/500.css";
import "@fontsource/ibm-plex-serif/700.css";
import ibm400 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-400-normal.woff2";
import ibm500 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-500-normal.woff2";
import ibm700 from "@fontsource/ibm-plex-sans/files/ibm-plex-sans-latin-700-normal.woff2";
import ibmserif400 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-400-normal.woff2";
import ibmserif500 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-500-normal.woff2";
import ibmserif700 from "@fontsource/ibm-plex-serif/files/ibm-plex-serif-latin-700-normal.woff2";
import { ViewTransitions } from "astro:transitions";



interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="color-scheme" content="light dark">
<link rel="icon" type="image/svg+xml" href="src/icons/favicon-light.svg">
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={ibm400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibm500} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibm700} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif500} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={ibmserif700} as="font" type="font/woff2" crossorigin/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Early theme initialization script - applied before rendering to prevent flash -->
<script is:inline>
  (function() {
    // THIS SCRIPT RUNS EARLY - before DOMContentLoaded
    const key = 'theme';
    const stored = localStorage.getItem(key);
    let isDark;
    if (stored === 'dark') {
      isDark = true;
    } else if (stored === 'light') {
      isDark = false;
    } else {
      // No explicit theme: use system preference
      isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    document.documentElement.classList.toggle('dark', isDark);
    document.documentElement.style.colorScheme = isDark ? 'dark' : 'light';
    // Listen for storage events to handle theme changes from other tabs/windows
    window.addEventListener('storage', (e) => {
      if (e.key === key) {
        const isDark = e.newValue === 'dark';
        document.documentElement.classList.toggle('dark', isDark);
        document.documentElement.style.colorScheme = isDark ? 'dark' : 'light';
      }
    });
  })();
</script>

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) => {
    const event = e as TransitionBeforeSwapEvent;
    
    // Preserve fonts to prevent unnecessary reloads
    [...event.newDocument.head.querySelectorAll("link[as=\"font\"]")].forEach(link => link.remove());
    
    // Preserve theme state
    const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    event.newDocument.documentElement.classList.toggle('dark', currentTheme === 'dark');
    event.newDocument.documentElement.style.colorScheme = currentTheme === 'dark' ? 'dark' : 'light';
      // Apply body background color to prevent flash during transition
    const lightColor = 'oklch(0.967 0.001 286.375)';
    const darkColor = 'oklch(0.25 0.001 286.375)';
    const bgColor = currentTheme === 'dark' ? darkColor : lightColor;
      // Set the background color and text colors in the new document
    const styleEl = document.createElement('style');
    styleEl.textContent = `
      body { 
        background-color: ${bgColor} !important; 
      }
      /* Force dark mode text colors when dark class is present */
      html.dark .text-zinc-700, 
      html.dark .dark\\:text-zinc-200 { 
        color: rgba(228, 228, 231, 0.9) !important; 
      }
      html.dark .text-black, 
      html.dark .dark\\:text-white { 
        color: rgba(255, 255, 255, 0.9) !important; 
      }
      /* Force light mode text colors when dark class is absent */
      html:not(.dark) .dark\\:text-zinc-200, 
      html:not(.dark) .text-zinc-700 { 
        color: rgba(63, 63, 70, 0.9) !important; 
      }
      html:not(.dark) .dark\\:text-white, 
      html:not(.dark) .text-black { 
        color: rgba(0, 0, 0, 0.9) !important; 
      }
    `;
    event.newDocument.head.appendChild(styleEl);
  });
    // After transition completes
  document.addEventListener("astro:after-transition", () => {
    // Apply current theme color
    const isDark = document.documentElement.classList.contains('dark');
    const lightColor = 'oklch(0.967 0.001 286.375)';
    const darkColor = 'oklch(0.25 0.001 286.375)';
    
    // Force theme-specific styles
    document.body.style.transition = 'none';
    document.body.style.backgroundColor = isDark ? darkColor : lightColor;
    
    // Force text colors to update
    const textElements = document.querySelectorAll('.text-zinc-700, .text-zinc-200, .text-black, .text-white');
    textElements.forEach(el => {
      if (el instanceof HTMLElement) {
        // Force a repaint
        el.style.transition = 'none';
        el.style.color = window.getComputedStyle(el).color;
        void el.offsetHeight;
        el.style.transition = '';
      }
    });
    
    // Re-enable transitions after a brief delay
    setTimeout(() => {
      document.body.style.transition = '';
    }, 20);
  });
</script>

<!-- Non-theme functionality script -->
<script is:inline type="module">
  const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  function init() {
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    document.addEventListener("scroll", debounce(onScroll, 10));
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");
    animateElements.forEach((element) => {
      element.classList.add("show");
    });
  }

  function onScroll() {
    requestAnimationFrame(() => {
      if (window.scrollY > 0) {
        document.documentElement.classList.add("scrolled");
      } else {
        document.documentElement.classList.remove("scrolled");
      }
    });
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
</script>
<!-- Early theme initialization script - applied before any CSS to prevent FOUC -->
<script is:inline>
  (function() {
    // THIS SCRIPT RUNS EARLY - before DOMContentLoaded
    const key = 'theme';
    const stored = localStorage.getItem(key);
    let isDark;
    if (stored === 'dark') {
      isDark = true;
    } else if (stored === 'light') {
      isDark = false;
    } else {
      // No explicit theme: use system preference
      isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    document.documentElement.classList.toggle('dark', isDark);
    document.documentElement.style.colorScheme = isDark ? 'dark' : 'light';
    // Listen for storage events to handle theme changes from other tabs/windows
    window.addEventListener('storage', (e) => {
      if (e.key === key) {
        const isDark = e.newValue === 'dark';
        document.documentElement.classList.toggle('dark', isDark);
        document.documentElement.style.colorScheme = isDark ? 'dark' : 'light';
      }
    });
  })();
</script>
