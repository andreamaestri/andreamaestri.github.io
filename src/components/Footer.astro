---
import Container from "@components/Container.astro";
import { SITE, SOCIALS } from "@consts";
import BackToTop from "@components/BackToTop.astro";
import { Sun, Moon } from "@carbon/icons-react";
import { motion } from "motion/react";
import { Icon } from "astro-icon/components";
---

<motion.footer
  className="py-6 text-sm border-t border-black/5 dark:border-white/5"
  initial={{ opacity: 0, y: 10 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.5, ease: "easeOut" }}
  client:load
>
  <Container>
    <div class="relative">
      <div class="absolute right-0 -top-20">
        <BackToTop />
      </div>
    </div>
    <div class="flex flex-col md:flex-row justify-between items-center gap-4">
      <div class="text-zinc-500 dark:text-zinc-400 flex items-center">
        <span>&copy; {new Date().getFullYear()}</span>
        <span class="mx-2 text-zinc-300 dark:text-zinc-600">|</span>
        <span>{SITE.NAME}</span>
      </div>
      
      <div class="flex items-center gap-6">
        <div class="hidden md:flex items-center gap-3 mr-2">
          {SOCIALS.map(social => (
            <a 
              href={social.HREF}
              target="_blank"
              rel="noopener noreferrer"
              class="text-zinc-400 hover:text-zinc-800 dark:text-zinc-500 dark:hover:text-zinc-200 transition-colors duration-200"
              aria-label={`Visit ${social.NAME}`}
            >
              <Icon name={social.ICON} size={18} />
            </a>
          ))}
        </div>
        
        <label class="switch" aria-label="Toggle dark mode">
          <input 
            type="checkbox"
            class="theme-controller"
            aria-label="Toggle between dark and light mode"
          />          <span class="slider">
            <Sun className="sun-icon" size={14} />
            <Moon className="moon-icon" size={14} />
          </span>
        </label>
      </div>
    </div>
  </Container>
</motion.footer>

<!-- Unified theme‐toggle logic for all .theme-controller checkboxes -->
<script is:inline>
  (function () {
    const KEY = "theme";
    let tempStyleEl = null;

    // Function to directly apply theme changes
    function applyTheme(isDark) {
      document.documentElement.classList.add("theme-transition");

      // Apply to document
      document.documentElement.classList.toggle("dark", isDark);
      document.documentElement.style.colorScheme = isDark ? "dark" : "light";

      // Update all toggles
      document.querySelectorAll(".theme-controller").forEach((input) => {
        if (input instanceof HTMLInputElement) {
          input.checked = isDark;
        }
      });

      // Directly set background color to avoid flashing
      if (isDark) {
        document.body.style.backgroundColor = "#18181b"; // A dark zinc color
      } else {
        document.body.style.backgroundColor = "#ffffff"; // White for light mode
      }

      // Create and inject temporary style element
      if (tempStyleEl) document.head.removeChild(tempStyleEl);
      tempStyleEl = document.createElement("style");
      tempStyleEl.textContent = isDark
        ? `html.dark { color-scheme: dark; } 
           body { background-color: #18181b; color: rgba(255, 255, 255, 0.75); }
           .site-name { color: #fafaf9; }`
        : `html:not(.dark) { color-scheme: light; } 
           body { background-color: #ffffff; color: rgba(0, 0, 0, 0.5); }
           .site-name { color: #27272a; }`;
      document.head.appendChild(tempStyleEl);

      // Remove transition class after short delay
      setTimeout(() => {
        document.documentElement.classList.remove("theme-transition");
      }, 300);
    }

    // Initialize toggles after DOM is ready
    function initToggles() {
      const isDark = document.documentElement.classList.contains("dark");
      document.querySelectorAll(".theme-controller").forEach((input) => {
        if (input instanceof HTMLInputElement) {
          // Set initial state
          input.checked = isDark;

          // Remove any existing listeners to prevent duplicates
          input.removeEventListener("change", handleThemeChange);

          // Add change listener
          input.addEventListener("change", handleThemeChange);
        }
      });
    }

    // Handle theme change from any toggle
    function handleThemeChange(e) {
      const target = e.target;
      if (target instanceof HTMLInputElement) {
        const nextDark = target.checked;
        // Store user's explicit choice
        localStorage.setItem(KEY, nextDark ? "dark" : "light");
        // Apply the theme immediately
        applyTheme(nextDark);
      }
    }

    // Initialize on DOMContentLoaded
    document.addEventListener("DOMContentLoaded", initToggles);

    // Re-sync toggles after Astro client swap
    document.addEventListener("astro:after-swap", initToggles);

    // Set up the toggles on script load as well (for immediate effect)
    initToggles();
  })();
</script>
